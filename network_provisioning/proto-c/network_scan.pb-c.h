/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: network_scan.proto */

#ifndef PROTOBUF_C_network_5fscan_2eproto__INCLUDED
#define PROTOBUF_C_network_5fscan_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1004000 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "constants.pb-c.h"
#include "network_constants.pb-c.h"

typedef struct WifiScanStart WifiScanStart;
typedef struct ThreadScanStart ThreadScanStart;
typedef struct CmdScanStart CmdScanStart;
typedef struct RespScanStart RespScanStart;
typedef struct CmdScanStatus CmdScanStatus;
typedef struct RespScanStatus RespScanStatus;
typedef struct CmdScanResult CmdScanResult;
typedef struct WifiScanResult WifiScanResult;
typedef struct ThreadScanResult ThreadScanResult;
typedef struct ScanResult ScanResult;
typedef struct RespScanResult RespScanResult;
typedef struct NetworkScanPayload NetworkScanPayload;


/* --- enums --- */

typedef enum _NetworkScanMsgType {
  NETWORK_SCAN_MSG_TYPE__TypeCmdScanStart = 0,
  NETWORK_SCAN_MSG_TYPE__TypeRespScanStart = 1,
  NETWORK_SCAN_MSG_TYPE__TypeCmdScanStatus = 2,
  NETWORK_SCAN_MSG_TYPE__TypeRespScanStatus = 3,
  NETWORK_SCAN_MSG_TYPE__TypeCmdScanResult = 4,
  NETWORK_SCAN_MSG_TYPE__TypeRespScanResult = 5
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(NETWORK_SCAN_MSG_TYPE)
} NetworkScanMsgType;

/* --- messages --- */

struct  WifiScanStart
{
  ProtobufCMessage base;
  protobuf_c_boolean blocking;
  protobuf_c_boolean passive;
  uint32_t group_channels;
  uint32_t period_ms;
};
#define WIFI_SCAN_START__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&wifi_scan_start__descriptor) \
    , 0, 0, 0, 0 }


struct  ThreadScanStart
{
  ProtobufCMessage base;
  protobuf_c_boolean blocking;
  uint32_t channel_mask;
};
#define THREAD_SCAN_START__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&thread_scan_start__descriptor) \
    , 0, 0 }


typedef enum {
  CMD_SCAN_START__PAYLOAD__NOT_SET = 0,
  CMD_SCAN_START__PAYLOAD_WIFI_SCAN_START = 10,
  CMD_SCAN_START__PAYLOAD_THREAD_SCAN_START = 11
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CMD_SCAN_START__PAYLOAD__CASE)
} CmdScanStart__PayloadCase;

struct  CmdScanStart
{
  ProtobufCMessage base;
  NetworkType net_type;
  CmdScanStart__PayloadCase payload_case;
  union {
    WifiScanStart *wifi_scan_start;
    ThreadScanStart *thread_scan_start;
  };
};
#define CMD_SCAN_START__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmd_scan_start__descriptor) \
    , NETWORK_TYPE__WifiNetwork, CMD_SCAN_START__PAYLOAD__NOT_SET, {0} }


struct  RespScanStart
{
  ProtobufCMessage base;
  NetworkType net_type;
};
#define RESP_SCAN_START__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&resp_scan_start__descriptor) \
    , NETWORK_TYPE__WifiNetwork }


struct  CmdScanStatus
{
  ProtobufCMessage base;
  NetworkType net_type;
};
#define CMD_SCAN_STATUS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmd_scan_status__descriptor) \
    , NETWORK_TYPE__WifiNetwork }


struct  RespScanStatus
{
  ProtobufCMessage base;
  NetworkType net_type;
  protobuf_c_boolean scan_finished;
  uint32_t result_count;
};
#define RESP_SCAN_STATUS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&resp_scan_status__descriptor) \
    , NETWORK_TYPE__WifiNetwork, 0, 0 }


struct  CmdScanResult
{
  ProtobufCMessage base;
  NetworkType net_type;
  uint32_t start_index;
  uint32_t count;
};
#define CMD_SCAN_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cmd_scan_result__descriptor) \
    , NETWORK_TYPE__WifiNetwork, 0, 0 }


struct  WifiScanResult
{
  ProtobufCMessage base;
  ProtobufCBinaryData ssid;
  uint32_t channel;
  int32_t rssi;
  ProtobufCBinaryData bssid;
  WifiAuthMode auth;
};
#define WIFI_SCAN_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&wifi_scan_result__descriptor) \
    , {0,NULL}, 0, 0, {0,NULL}, WIFI_AUTH_MODE__Open }


struct  ThreadScanResult
{
  ProtobufCMessage base;
  uint32_t pan_id;
  uint32_t channel;
  int32_t rssi;
  uint32_t lqi;
  ProtobufCBinaryData ext_addr;
  char *network_name;
  ProtobufCBinaryData ext_pan_id;
};
#define THREAD_SCAN_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&thread_scan_result__descriptor) \
    , 0, 0, 0, 0, {0,NULL}, (char *)protobuf_c_empty_string, {0,NULL} }


typedef enum {
  SCAN_RESULT__RESULT__NOT_SET = 0,
  SCAN_RESULT__RESULT_WIFI_RESULT = 10,
  SCAN_RESULT__RESULT_THREAD_RESULT = 11
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(SCAN_RESULT__RESULT__CASE)
} ScanResult__ResultCase;

struct  ScanResult
{
  ProtobufCMessage base;
  ScanResult__ResultCase result_case;
  union {
    WifiScanResult *wifi_result;
    ThreadScanResult *thread_result;
  };
};
#define SCAN_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&scan_result__descriptor) \
    , SCAN_RESULT__RESULT__NOT_SET, {0} }


struct  RespScanResult
{
  ProtobufCMessage base;
  NetworkType net_type;
  size_t n_entries;
  ScanResult **entries;
};
#define RESP_SCAN_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&resp_scan_result__descriptor) \
    , NETWORK_TYPE__WifiNetwork, 0,NULL }


typedef enum {
  NETWORK_SCAN_PAYLOAD__PAYLOAD__NOT_SET = 0,
  NETWORK_SCAN_PAYLOAD__PAYLOAD_CMD_SCAN_START = 10,
  NETWORK_SCAN_PAYLOAD__PAYLOAD_RESP_SCAN_START = 11,
  NETWORK_SCAN_PAYLOAD__PAYLOAD_CMD_SCAN_STATUS = 12,
  NETWORK_SCAN_PAYLOAD__PAYLOAD_RESP_SCAN_STATUS = 13,
  NETWORK_SCAN_PAYLOAD__PAYLOAD_CMD_SCAN_RESULT = 14,
  NETWORK_SCAN_PAYLOAD__PAYLOAD_RESP_SCAN_RESULT = 15
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(NETWORK_SCAN_PAYLOAD__PAYLOAD__CASE)
} NetworkScanPayload__PayloadCase;

struct  NetworkScanPayload
{
  ProtobufCMessage base;
  NetworkScanMsgType msg;
  Status status;
  NetworkScanPayload__PayloadCase payload_case;
  union {
    CmdScanStart *cmd_scan_start;
    RespScanStart *resp_scan_start;
    CmdScanStatus *cmd_scan_status;
    RespScanStatus *resp_scan_status;
    CmdScanResult *cmd_scan_result;
    RespScanResult *resp_scan_result;
  };
};
#define NETWORK_SCAN_PAYLOAD__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&network_scan_payload__descriptor) \
    , NETWORK_SCAN_MSG_TYPE__TypeCmdScanStart, STATUS__Success, NETWORK_SCAN_PAYLOAD__PAYLOAD__NOT_SET, {0} }


/* WifiScanStart methods */
void   wifi_scan_start__init
                     (WifiScanStart         *message);
size_t wifi_scan_start__get_packed_size
                     (const WifiScanStart   *message);
size_t wifi_scan_start__pack
                     (const WifiScanStart   *message,
                      uint8_t             *out);
size_t wifi_scan_start__pack_to_buffer
                     (const WifiScanStart   *message,
                      ProtobufCBuffer     *buffer);
WifiScanStart *
       wifi_scan_start__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   wifi_scan_start__free_unpacked
                     (WifiScanStart *message,
                      ProtobufCAllocator *allocator);
/* ThreadScanStart methods */
void   thread_scan_start__init
                     (ThreadScanStart         *message);
size_t thread_scan_start__get_packed_size
                     (const ThreadScanStart   *message);
size_t thread_scan_start__pack
                     (const ThreadScanStart   *message,
                      uint8_t             *out);
size_t thread_scan_start__pack_to_buffer
                     (const ThreadScanStart   *message,
                      ProtobufCBuffer     *buffer);
ThreadScanStart *
       thread_scan_start__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   thread_scan_start__free_unpacked
                     (ThreadScanStart *message,
                      ProtobufCAllocator *allocator);
/* CmdScanStart methods */
void   cmd_scan_start__init
                     (CmdScanStart         *message);
size_t cmd_scan_start__get_packed_size
                     (const CmdScanStart   *message);
size_t cmd_scan_start__pack
                     (const CmdScanStart   *message,
                      uint8_t             *out);
size_t cmd_scan_start__pack_to_buffer
                     (const CmdScanStart   *message,
                      ProtobufCBuffer     *buffer);
CmdScanStart *
       cmd_scan_start__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmd_scan_start__free_unpacked
                     (CmdScanStart *message,
                      ProtobufCAllocator *allocator);
/* RespScanStart methods */
void   resp_scan_start__init
                     (RespScanStart         *message);
size_t resp_scan_start__get_packed_size
                     (const RespScanStart   *message);
size_t resp_scan_start__pack
                     (const RespScanStart   *message,
                      uint8_t             *out);
size_t resp_scan_start__pack_to_buffer
                     (const RespScanStart   *message,
                      ProtobufCBuffer     *buffer);
RespScanStart *
       resp_scan_start__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   resp_scan_start__free_unpacked
                     (RespScanStart *message,
                      ProtobufCAllocator *allocator);
/* CmdScanStatus methods */
void   cmd_scan_status__init
                     (CmdScanStatus         *message);
size_t cmd_scan_status__get_packed_size
                     (const CmdScanStatus   *message);
size_t cmd_scan_status__pack
                     (const CmdScanStatus   *message,
                      uint8_t             *out);
size_t cmd_scan_status__pack_to_buffer
                     (const CmdScanStatus   *message,
                      ProtobufCBuffer     *buffer);
CmdScanStatus *
       cmd_scan_status__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmd_scan_status__free_unpacked
                     (CmdScanStatus *message,
                      ProtobufCAllocator *allocator);
/* RespScanStatus methods */
void   resp_scan_status__init
                     (RespScanStatus         *message);
size_t resp_scan_status__get_packed_size
                     (const RespScanStatus   *message);
size_t resp_scan_status__pack
                     (const RespScanStatus   *message,
                      uint8_t             *out);
size_t resp_scan_status__pack_to_buffer
                     (const RespScanStatus   *message,
                      ProtobufCBuffer     *buffer);
RespScanStatus *
       resp_scan_status__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   resp_scan_status__free_unpacked
                     (RespScanStatus *message,
                      ProtobufCAllocator *allocator);
/* CmdScanResult methods */
void   cmd_scan_result__init
                     (CmdScanResult         *message);
size_t cmd_scan_result__get_packed_size
                     (const CmdScanResult   *message);
size_t cmd_scan_result__pack
                     (const CmdScanResult   *message,
                      uint8_t             *out);
size_t cmd_scan_result__pack_to_buffer
                     (const CmdScanResult   *message,
                      ProtobufCBuffer     *buffer);
CmdScanResult *
       cmd_scan_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cmd_scan_result__free_unpacked
                     (CmdScanResult *message,
                      ProtobufCAllocator *allocator);
/* WifiScanResult methods */
void   wifi_scan_result__init
                     (WifiScanResult         *message);
size_t wifi_scan_result__get_packed_size
                     (const WifiScanResult   *message);
size_t wifi_scan_result__pack
                     (const WifiScanResult   *message,
                      uint8_t             *out);
size_t wifi_scan_result__pack_to_buffer
                     (const WifiScanResult   *message,
                      ProtobufCBuffer     *buffer);
WifiScanResult *
       wifi_scan_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   wifi_scan_result__free_unpacked
                     (WifiScanResult *message,
                      ProtobufCAllocator *allocator);
/* ThreadScanResult methods */
void   thread_scan_result__init
                     (ThreadScanResult         *message);
size_t thread_scan_result__get_packed_size
                     (const ThreadScanResult   *message);
size_t thread_scan_result__pack
                     (const ThreadScanResult   *message,
                      uint8_t             *out);
size_t thread_scan_result__pack_to_buffer
                     (const ThreadScanResult   *message,
                      ProtobufCBuffer     *buffer);
ThreadScanResult *
       thread_scan_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   thread_scan_result__free_unpacked
                     (ThreadScanResult *message,
                      ProtobufCAllocator *allocator);
/* ScanResult methods */
void   scan_result__init
                     (ScanResult         *message);
size_t scan_result__get_packed_size
                     (const ScanResult   *message);
size_t scan_result__pack
                     (const ScanResult   *message,
                      uint8_t             *out);
size_t scan_result__pack_to_buffer
                     (const ScanResult   *message,
                      ProtobufCBuffer     *buffer);
ScanResult *
       scan_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   scan_result__free_unpacked
                     (ScanResult *message,
                      ProtobufCAllocator *allocator);
/* RespScanResult methods */
void   resp_scan_result__init
                     (RespScanResult         *message);
size_t resp_scan_result__get_packed_size
                     (const RespScanResult   *message);
size_t resp_scan_result__pack
                     (const RespScanResult   *message,
                      uint8_t             *out);
size_t resp_scan_result__pack_to_buffer
                     (const RespScanResult   *message,
                      ProtobufCBuffer     *buffer);
RespScanResult *
       resp_scan_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   resp_scan_result__free_unpacked
                     (RespScanResult *message,
                      ProtobufCAllocator *allocator);
/* NetworkScanPayload methods */
void   network_scan_payload__init
                     (NetworkScanPayload         *message);
size_t network_scan_payload__get_packed_size
                     (const NetworkScanPayload   *message);
size_t network_scan_payload__pack
                     (const NetworkScanPayload   *message,
                      uint8_t             *out);
size_t network_scan_payload__pack_to_buffer
                     (const NetworkScanPayload   *message,
                      ProtobufCBuffer     *buffer);
NetworkScanPayload *
       network_scan_payload__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   network_scan_payload__free_unpacked
                     (NetworkScanPayload *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*WifiScanStart_Closure)
                 (const WifiScanStart *message,
                  void *closure_data);
typedef void (*ThreadScanStart_Closure)
                 (const ThreadScanStart *message,
                  void *closure_data);
typedef void (*CmdScanStart_Closure)
                 (const CmdScanStart *message,
                  void *closure_data);
typedef void (*RespScanStart_Closure)
                 (const RespScanStart *message,
                  void *closure_data);
typedef void (*CmdScanStatus_Closure)
                 (const CmdScanStatus *message,
                  void *closure_data);
typedef void (*RespScanStatus_Closure)
                 (const RespScanStatus *message,
                  void *closure_data);
typedef void (*CmdScanResult_Closure)
                 (const CmdScanResult *message,
                  void *closure_data);
typedef void (*WifiScanResult_Closure)
                 (const WifiScanResult *message,
                  void *closure_data);
typedef void (*ThreadScanResult_Closure)
                 (const ThreadScanResult *message,
                  void *closure_data);
typedef void (*ScanResult_Closure)
                 (const ScanResult *message,
                  void *closure_data);
typedef void (*RespScanResult_Closure)
                 (const RespScanResult *message,
                  void *closure_data);
typedef void (*NetworkScanPayload_Closure)
                 (const NetworkScanPayload *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    network_scan_msg_type__descriptor;
extern const ProtobufCMessageDescriptor wifi_scan_start__descriptor;
extern const ProtobufCMessageDescriptor thread_scan_start__descriptor;
extern const ProtobufCMessageDescriptor cmd_scan_start__descriptor;
extern const ProtobufCMessageDescriptor resp_scan_start__descriptor;
extern const ProtobufCMessageDescriptor cmd_scan_status__descriptor;
extern const ProtobufCMessageDescriptor resp_scan_status__descriptor;
extern const ProtobufCMessageDescriptor cmd_scan_result__descriptor;
extern const ProtobufCMessageDescriptor wifi_scan_result__descriptor;
extern const ProtobufCMessageDescriptor thread_scan_result__descriptor;
extern const ProtobufCMessageDescriptor scan_result__descriptor;
extern const ProtobufCMessageDescriptor resp_scan_result__descriptor;
extern const ProtobufCMessageDescriptor network_scan_payload__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_network_5fscan_2eproto__INCLUDED */
